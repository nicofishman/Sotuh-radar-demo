---
import type { SectionsType } from '../sections';

import clsx from 'clsx';

import Accordion from './UI/Accordion.astro';
import Arrow from './UI/Arrow.astro';
const { section, level } = Astro.props as {
	section: SectionsType;
	level: number;
};

const stacked = level ?? 0;

const fontStyle: {
	[key: number]: {
		size: string;
	};
} = {
	0: {
		size: 'text-xl',
	},
	1: {
		size: 'text-lg',
	},
	2: {
		size: 'text-base',
	},
	3: {
		size: 'text-sm',
	},
	4: {
		size: 'text-xs',
	},
};
---

{
	section.id.length > 0 &&
		(!('children' in section) ? (
			stacked === 0 ? (
				<a
					href={`#${section.id}`}
					class={clsx('block w-full pl-4 py-7 border-b-[2px] border-b-[#E8E9EA] mx-10')}
				>
					<span
						class={clsx(
							'text-primary-dark-green text-3xl font-extrabold hover:text-opacity-100 transition-colors',
							Object.keys(fontStyle).includes(stacked.toString())
								? fontStyle[stacked].size
								: 'text-base'
						)}
					>
						{section.id}
					</span>
				</a>
			) : (
				<a href={`#${section.id}`} class="w-full py-3 ml-5 flex items-center">
					<Arrow class="mr-4" />
					<span class="font-medium text-xl">{section.id}</span>
				</a>
			)
		) : (
			section.children && (
				<div class="block w-full pl-4 py-7 border-b-[2px] border-b-[#E8E9EA] mx-10">
					<Accordion
						header={section.id}
						className={clsx(
							'text-primary-dark-green font-extrabold text-3xl hover:text-opacity-100 transition-colors',
							Object.keys(fontStyle).includes(stacked.toString())
								? fontStyle[stacked].size
								: 'text-base'
						)}
					>
						{section.children.map((section) => (
							<Astro.self section={section} level={level + 1} />
						))}
					</Accordion>
				</div>
			)
		))
}
